// const express = require('express');
// const router = express.Router();
// const mongoose = require('mongoose');

// // Define schema and model for admin
// const adminSchema = new mongoose.Schema({
//     UserId: String,
//     UserName: String,
//     Password: String,
//     Email: String
// });



// console.log(adminSchema);
// const Admin = mongoose.model('dbadmin', adminSchema);
// console.log(Admin);

// // Admin login route
// router.post('/login', async (req, res) => {
//     const { UserId, Password } = req.body; // Collect data from the request body

//     try {
//         // Find admin by UserId and Password in the database
//         const admin = await Admin.findOne({ UserId: UserId, Password: Password });
//         if (admin) {
//             // If the user is found and password matches
//             res.status(200).send('Login successful! Redirecting...');
//         } else {
//             // If no matching admin is found
//             res.status(401).send('Invalid UserId or Password');
//         }
//     } catch (error) {
//         console.error('Error during login:', error);
//         res.status(500).send('Server error');
//     }
// });

// module.exports = router;



// const express = require('express');
// const router = express.Router();
// const mongoose = require('mongoose');

// // Define schema and model for admin
// const adminSchema = new mongoose.Schema({
//     UserId: { type: String, required: true, unique: true },
//     UserName: { type: String, required: true },
//     Password: { type: String, required: true },
//     Email: { type: String, required: true, unique: true }
// });

// // Create the Admin model using the defined schema
// const Admin = mongoose.model('dbadmin', adminSchema);

// // Admin registration route
// router.post('/register', async (req, res) => {
//     const { UserId, UserName, Password, Email } = req.body; // Collect data from the request body

//     try {
//         // Create a new admin instance
//         const newAdmin = new Admin({
//             UserId,
//             UserName,
//             Password,  // Plain text password (not recommended for production)
//             Email
//         });

//         // Save the admin to the database
//         await newAdmin.save();
//         res.status(201).send('Admin registered successfully!');
//     } catch (error) {
//         console.error('Error during admin registration:', error);
//         if (error.code === 11000) { // Duplicate key error
//             res.status(400).send('UserId or Email already exists.');
//         } else {
//             res.status(500).send('Server error');
//         }
//     }
// });

// module.exports = router;



const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const Admin = require('../models/admin'); // Ensure this path is correct
// const User = require('./models/adminModel'); // Ensure this path is correct

// Admin login route
router.post('/login', async (req, res) => {
    const { UserId, Password } = req.body;

    try {
        // Find admin by UserId and Password
        const admin = await Admin.findOne({ UserId, Password });
        console.log(admin);
        if (admin) {
            // Redirect to the admin page on successful login
            res.redirect('/admin'); // Use absolute path for redirection
        } else {
            // If no matching admin is found
            res.status(401).send('Invalid UserId or Password');
        }
    } catch (error) {
        console.error('Error during login:', error);
        res.status(500).send('Server error');
    }
});

// Admin registers a new user
router.post('/register-user', async (req, res) => {
    const { UserId, UserName, Password, Email } = req.body;

    try {
        // Create a new user instance
        const newUser = new User({
            UserId,
            UserName,
            Password, // Plain text password (not recommended for production)
            Email
        });

        // Save the user to the database
        await newUser.save();
        res.status(201).send('User registered successfully!');
    } catch (error) {
        console.error('Error during user registration:', error);
        if (error.code === 11000) { // Duplicate key error
            res.status(400).send('UserId or Email already exists.');
        } else {
            res.status(500).send('Server error');
        }
    }
});

module.exports = router;
